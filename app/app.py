import streamlit as st
import librosa
import numpy as np
import matplotlib.pyplot as plt
import colorsys
from io import BytesIO
import tempfile
import os

st.set_page_config(page_title="Music Color Analyzer", page_icon="üéµ", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üéµ Music Color Analyzer")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º—É–∑—ã–∫—É –∏ —É–∑–Ω–∞–π—Ç–µ –µ—ë —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É!")


# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–ø–∏—Ä—É–µ–º –∏—Ö —Å—é–¥–∞)
def extract_music_features(y, sr):
    features = {}
    features['tempo'] = librosa.beat.tempo(y=y, sr=sr)[0]
    features['energy'] = np.mean(librosa.feature.rms(y=y))
    features['brightness'] = np.mean(librosa.feature.spectral_centroid(y=y, sr=sr))
    features['harmony'] = np.mean(librosa.feature.spectral_rolloff(y=y, sr=sr))
    features['complexity'] = np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr))

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    features['tempo_norm'] = np.clip(features['tempo'] / 200, 0.1, 0.9)
    features['energy_norm'] = np.clip(features['energy'] * 10, 0.2, 0.9)
    features['brightness_norm'] = np.clip(features['brightness'] / 5000, 0.1, 0.8)
    features['harmony_norm'] = np.clip(features['harmony'] / 8000, 0.1, 0.7)
    features['complexity_norm'] = np.clip(features['complexity'] / 6000, 0.1, 0.6)

    return features


def music_to_colors(audio_data, sr, num_colors=5):
    features = extract_music_features(audio_data, sr)
    colors = []

    base_hue = features['tempo_norm']
    base_saturation = features['energy_norm']
    base_value = features['brightness_norm']

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
    main_color = colorsys.hsv_to_rgb(base_hue, base_saturation, base_value)
    colors.append(main_color)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    for i in range(1, num_colors):
        hue_variation = (base_hue + features['harmony_norm'] * 0.3 * i) % 1.0
        sat_variation = np.clip(base_saturation + features['complexity_norm'] * 0.2 * (-1) ** i, 0.2, 0.9)
        val_variation = np.clip(base_value + 0.1 * i * (-1) ** i, 0.3, 0.95)

        variant_color = colorsys.hsv_to_rgb(hue_variation, sat_variation, val_variation)
        colors.append(variant_color)

    colors_rgb = [(int(r * 255), int(g * 255), int(b * 255)) for r, g, b in colors]
    return colors_rgb, features


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3, WAV)", type=['mp3', 'wav'])

if uploaded_file is not None:
    st.audio(uploaded_file, format='audio/mp3')

    with st.spinner('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫—É...'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            tmp_path = tmp_file.name

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—É–∑—ã–∫—É
            y, sr = librosa.load(tmp_path, duration=30)
            colors, features = music_to_colors(y, sr)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üé® –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞")
                # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞–ª–∏—Ç—Ä—ã
                fig, ax = plt.subplots(figsize=(10, 2))
                for i, color in enumerate(colors):
                    ax.fill_between([i, i + 1], 0, 1, color=np.array(color) / 255)
                    hex_color = f'#{color[0]:02X}{color[1]:02X}{color[2]:02X}'
                    text_color = 'white' if sum(color) < 380 else 'black'
                    ax.text(i + 0.5, 0.5, hex_color,
                            ha='center', va='center', fontsize=10,
                            color=text_color, weight='bold')
                ax.set_xlim(0, len(colors))
                ax.axis('off')
                st.pyplot(fig)

            with col2:
                st.subheader("üìä –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                st.metric("–¢–µ–º–ø", f"{features['tempo']:.1f} BPM")
                st.metric("–≠–Ω–µ—Ä–≥–∏—è", f"{features['energy']:.3f}")
                st.metric("–Ø—Ä–∫–æ—Å—Ç—å", f"{features['brightness']:.1f} Hz")
                st.metric("–°–ª–æ–∂–Ω–æ—Å—Ç—å", f"{features['complexity']:.1f} Hz")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            st.subheader("üé® –ö–æ–¥—ã —Ü–≤–µ—Ç–æ–≤")
            for i, color in enumerate(colors):
                hex_code = f'#{color[0]:02X}{color[1]:02X}{color[2]:02X}'
                st.code(f"–¶–≤–µ—Ç {i + 1}: RGB{color} ‚Üí {hex_code}")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(tmp_path)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("### üéµ –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Music Color Analyzer")