import librosa
import numpy as np
import matplotlib.pyplot as plt
import colorsys
from sklearn.cluster import KMeans


def music_to_colors(audio_path, num_colors=5):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
    y, sr = librosa.load(audio_path, duration=30)  # –ø–µ—Ä–≤—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    features = extract_music_features(y, sr)

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    base_colors = generate_base_colors(features, num_colors)

    return base_colors


def extract_music_features(y, sr):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    features = {}

    # 1. –¢–ï–ú–ü (–±–∏—Ç—Ä–µ–π—Ç)
    features['tempo'] = librosa.beat.tempo(y=y, sr=sr)[0]  # —É–¥–∞—Ä–æ–≤ –≤ –º–∏–Ω—É—Ç—É

    # 2. –≠–ù–ï–†–ì–ò–Ø (–≥—Ä–æ–º–∫–æ—Å—Ç—å)
    features['energy'] = np.mean(librosa.feature.rms(y=y))

    # 3. –Ø–†–ö–û–°–¢–¨ –ó–í–£–ö–ê (—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥)
    features['brightness'] = np.mean(librosa.feature.spectral_centroid(y=y, sr=sr))

    # 4. –ì–ê–†–ú–û–ù–ò–ß–ù–û–°–¢–¨
    features['harmony'] = np.mean(librosa.feature.spectral_rolloff(y=y, sr=sr))

    # 5. –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–ï –°–ò–ì–ù–ê–õ–ê
    features['complexity'] = np.mean(librosa.feature.spectral_bandwidth(y=y, sr=sr))

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    features['tempo_norm'] = np.clip(features['tempo'] / 200, 0.1, 0.9)
    features['energy_norm'] = np.clip(features['energy'] * 10, 0.2, 0.9)
    features['brightness_norm'] = np.clip(features['brightness'] / 5000, 0.1, 0.8)
    features['harmony_norm'] = np.clip(features['harmony'] / 8000, 0.1, 0.7)
    features['complexity_norm'] = np.clip(features['complexity'] / 6000, 0.1, 0.6)

    return features


def generate_base_colors(features, num_colors):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    colors = []

    # –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–ø–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏
    base_hue = features['tempo_norm']  # —Ç–µ–º–ø ‚Üí –æ—Ç—Ç–µ–Ω–æ–∫
    base_saturation = features['energy_norm']  # —ç–Ω–µ—Ä–≥–∏—è ‚Üí –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
    base_value = features['brightness_norm']  # —è—Ä–∫–æ—Å—Ç—å ‚Üí –∑–Ω–∞—á–µ–Ω–∏–µ

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç
    main_color = colorsys.hsv_to_rgb(base_hue, base_saturation, base_value)
    colors.append(main_color)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for i in range(1, num_colors):
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        hue_variation = (base_hue + features['harmony_norm'] * 0.3 * i) % 1.0
        sat_variation = np.clip(base_saturation + features['complexity_norm'] * 0.2 * (-1) ** i, 0.2, 0.9)
        val_variation = np.clip(base_value + 0.1 * i * (-1) ** i, 0.3, 0.95)

        variant_color = colorsys.hsv_to_rgb(hue_variation, sat_variation, val_variation)
        colors.append(variant_color)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB 0-255
    colors_rgb = [(int(r * 255), int(g * 255), int(b * 255)) for r, g, b in colors]

    return colors_rgb


def show_music_palette(colors, title="–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞"):
    """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É"""
    plt.figure(figsize=(10, 2))
    for i, color in enumerate(colors):
        plt.fill_between([i, i + 1], 0, 1, color=np.array(color) / 255)
        hex_color = f'#{color[0]:02X}{color[1]:02X}{color[2]:02X}'
        text_color = 'white' if sum(color) < 380 else 'black'
        plt.text(i + 0.5, 0.5, hex_color,
                 ha='center', va='center', fontsize=10, color=text_color, weight='bold')
    plt.xlim(0, len(colors))
    plt.axis('off')
    plt.title(title, fontsize=14, pad=20)
    plt.tight_layout()
    plt.show()


# –¢–ï–°–¢–ò–†–£–ï–ú!
audio_path = "C:/Users/Yulia-PC/PythonProject/data/Waltz_No_2.mp3"
colors = music_to_colors(audio_path)

print("üéµ –ú–£–ó–´–ö–ê–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:")
print(f"–¢–µ–º–ø: {librosa.beat.tempo(y=librosa.load(audio_path)[0], sr=librosa.load(audio_path)[1])[0]:.1f} BPM")
print(f"–≠–Ω–µ—Ä–≥–∏—è: {np.mean(librosa.feature.rms(y=librosa.load(audio_path)[0])):.3f}")
print(
    f"–Ø—Ä–∫–æ—Å—Ç—å: {np.mean(librosa.feature.spectral_centroid(y=librosa.load(audio_path)[0], sr=librosa.load(audio_path)[1])):.1f}")

print("\nüé® –£–ù–ò–ö–ê–õ–¨–ù–´–ï –¶–í–ï–¢–ê –ú–£–ó–´–ö–ò:")
for i, color in enumerate(colors):
    print(f"–¶–≤–µ—Ç {i + 1}: RGB{color} ‚Üí #{color[0]:02X}{color[1]:02X}{color[2]:02X}")

show_music_palette(colors)